#!/bin/bash
#
# gentoo.peroidic.sh - run scripts in given dirs. this is 
# designed to run out of crontab. 

# should ALWAYS ben installed to /usr/local/sbin
install_path="/usr/local/sbin"

# simple usage statement
output_usage() { cat << EOF
 Usage: generate-reports [global-option]
   Global Options:
    -c: run script
    -d: daily
    -w: weekly
    -m: monthly
    -y: yearly
    -s: security
    -h: this help message
EOF
}

# source config file, before doing anything else
if [ -r ${install_path}/gentoo.periodic/gentoo.periodic.conf ]; then 
	source ${install_path}/gentoo.periodic/gentoo.periodic.conf
else 
	echo "gentoo.periodic.sh: ERROR! Cannot source config file!"
	exit 1	
fi

# this actually executes the script modules
run_script() {
	for script in `ls -1 ${install_path}/$PERIOD | sort -n`; do
		sh ${install_path}/gentoo.periodic/$PERIOD/$script >> $TMP_FILE
	done
	# just so we know that we are done.
	echo "" >> $TMP_FILE
	echo "  *** Reporting Complete!" >> $TMP_FILE
	echo "" >> $TMP_FILE	
}

# option list and script runner handling. 
# first, dont do anything unless the config is present
if [ -e ${install_path}/gentoo.periodic/gentoo.periodic.conf ]; then
	source ${install_path}/gentoo.periodic/gentoo.periodic.conf 
	# then handle options
	while getopts c:dmwysh OPT; do
		case "$OPT" in 
			c)      # run script manually 
				SCRIPT="$OPTARG"
				self_ref
				sh -x $SCRIPT 
				;;
			d)      # daily
				PERIOD="daily"
				self_ref
				run_script
				;;
			w)      # weekly
				PERIOD="weekly"
				self_ref
				run_script
				;;
			m)      # monthly
				PERIOD="monthly"
				self_ref
				run_script
				;;
			y)      # yearly
				PERIOD="yearly"
				self_ref
				run_script
				;;
			s)      # security
				PERIOD="security"
				self_ref
				run_script
				;;
			h)      # help
				output_usage
				;;
			*)      # everything else
				output_usage
				;;
		esac
	done
else
	echo "gentoo.periodic.sh: ERROR! Cannot source config file!"
	exit 1	
fi

# mailout and housekeeping.
HOST=`hostname | tr [:lower:] [:upper:]`
if [[ -e $TMP_FILE ]]; then 
	# loop thru the email address list
	for eml in ${DST_EML}; do 
		mail -s "$HOST: $PERIOD report for $NOW" $eml < $TMP_FILE
	done

	rm -f $TMP_FILE
fi 
